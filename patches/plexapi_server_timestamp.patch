diff --git a/plexapi/server.py b/plexapi/server.py
index bda1cd6..c45bf24 100644
--- a/plexapi/server.py
+++ b/plexapi/server.py
@@ -29,6 +29,8 @@ from plexapi import photo as _photo  # noqa: F401
 from plexapi import playlist as _playlist  # noqa: F401
 from plexapi import video as _video  # noqa: F401
 
+from backports.datetime_timestamp import timestamp
+
 
 class PlexServer(PlexObject):
     """ This is the main entry point to interacting with a Plex server. It allows you to
@@ -665,7 +667,7 @@ class PlexServer(PlexObject):
         if librarySectionID:
             args['librarySectionID'] = librarySectionID
         if mindate:
-            args['viewedAt>'] = int(mindate.timestamp())
+            args['viewedAt>'] = int(timestamp(mindate))
 
         key = f'/status/sessions/history/all{utils.joinArgs(args)}'
         return self.fetchItems(key, maxresults=maxresults)
@@ -1001,7 +1003,7 @@ class PlexServer(PlexObject):
                 raise BadRequest(f'Unknown filter: {key}={value}')
             if key.startswith('at'):
                 try:
-                    value = utils.cast(int, value.timestamp())
+                    value = utils.cast(int, timestamp(value))
                 except AttributeError:
                     raise BadRequest(f'Time frame filter must be a datetime object: {key}={value}')
             elif key.startswith('bytes') or key == 'lan':
@@ -1215,7 +1217,7 @@ class StatisticsBandwidth(PlexObject):
                 self.__class__.__name__,
                 self._clean(self.accountID),
                 self._clean(self.deviceID),
-                self._clean(int(self.at.timestamp()))
+                self._clean(int(timestamp(self.at)))
             ] if p])
         )
 
@@ -1252,7 +1254,7 @@ class StatisticsResources(PlexObject):
         self.timespan = utils.cast(int, data.attrib.get('timespan'))
 
     def __repr__(self):
-        return f"<{':'.join([p for p in [self.__class__.__name__, self._clean(int(self.at.timestamp()))] if p])}>"
+        return f"<{':'.join([p for p in [self.__class__.__name__, self._clean(int(timestamp(self.at)))] if p])}>"
 
 
 @utils.registerPlexObject
